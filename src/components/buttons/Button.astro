---
interface Props {
  href: string;
  size?: "md" | "lg";
  block?: boolean;
  style?: "outline" | "primary" | "inverted" | "muted";
  class?: string;
  [x: string]: any;
}

const {
  href,
  block,
  size = "lg",
  style = "primary",
  class: className,
  ...rest
} = Astro.props;

const sizes = {
  lg: "btn-lg",
  md: "btn-md",
};

const styles = {
  outline: "btn-outline",
  primary: "btn-primary",
  inverted: "btn-inverted",
  muted: "btn-muted",
};
---

<style>
  .btn {
    border-radius: 0.375rem;
    text-align: center;
    transition: all 0.3s ease;
    display: inline-block;
    cursor: pointer;
    text-decoration: none;
    padding: 0.5rem 1rem;
  }

  .btn-lg {
    padding: 0.75rem 1.25rem;
  }

  .btn-md {
    padding: 0.5rem 1rem;
  }

  .btn-outline {
    background-color: white;
    border: 2px solid black;
    color: black;
  }

  .btn-outline:hover {
    background-color: #f0f0f0;
  }

  .btn-primary {
    background-color: black;
    color: white;
    border: 2px solid transparent;
  }

  .btn-primary:hover {
    background-color: #333;
  }

  .btn-inverted {
    background-color: white;
    color: black;
    border: 2px solid transparent;
  }

  .btn-muted {
    background-color: #f0f0f0;
    color: black;
    border: 2px solid transparent;
  }

  .btn-muted:hover {
    background-color: #e0e0e0;
  }

  .block {
    width: 100%;
  }

  .ring {
    outline: 2px solid rgba(0, 0, 0, 0.2);
    outline-offset: 2px;
  }
</style>

<a
  href={href}
  {...rest}
  class={[
    "btn",
    block ? "block" : "",
    sizes[size],
    styles[style],
    className,
  ].filter(Boolean).join(' ')}
><slot /></a>
